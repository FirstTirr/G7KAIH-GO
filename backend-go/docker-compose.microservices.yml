version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: g7kaih-postgres-micro
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-g7kaih}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: g7kaih-redis-micro
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    command: redis-server --appendonly yes

  # Main API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: g7kaih-api-gateway
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      SERVICE_NAME: api-gateway
      SERVICE_VERSION: 1.0.0
      ENVIRONMENT: production

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-g7kaih}

      # Microservices
      MICROSERVICES_ENABLED: "true"
      SERVICE_DISCOVERY: "dns"
      AUTH_SERVICE_URL: http://auth-service:8081
      STORAGE_SERVICE_URL: http://storage-service:8082
      NOTIFICATION_SERVICE_URL: http://notification-service:8083

      # CORS
      CORS_MODE: ${CORS_MODE:-production}
      CORS_PROD_FRONTEND_URL: ${CORS_PROD_FRONTEND_URL}
      CORS_PROD_ADMIN_URL: ${CORS_PROD_ADMIN_URL}
      CORS_CUSTOM_ORIGINS: ${CORS_CUSTOM_ORIGINS}

      # JWT
      JWT_SECRET: ${JWT_SECRET}

    depends_on:
      - postgres
      - redis
    networks:
      - microservices-network

  # Auth Microservice (authentication & authorization)
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: g7kaih-auth-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      SERVICE_NAME: auth-service
      SERVICE_VERSION: 1.0.0
      ENVIRONMENT: production

      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-g7kaih}

      JWT_SECRET: ${JWT_SECRET}

      # Internal service communication
      MICROSERVICES_ENABLED: "true"

    depends_on:
      - postgres
      - redis
    networks:
      - microservices-network

  # Storage Microservice (file uploads, Cloudinary)
  storage-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: g7kaih-storage-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      PORT: 8082
      SERVICE_NAME: storage-service
      SERVICE_VERSION: 1.0.0
      ENVIRONMENT: production

      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}

      MICROSERVICES_ENABLED: "true"

    networks:
      - microservices-network

  # Notification Microservice (emails, push notifications)
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: g7kaih-notification-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      PORT: 8083
      SERVICE_NAME: notification-service
      SERVICE_VERSION: 1.0.0
      ENVIRONMENT: production

      MICROSERVICES_ENABLED: "true"

    depends_on:
      - redis
    networks:
      - microservices-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: g7kaih-nginx-lb
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-microservices.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
    networks:
      - microservices-network

volumes:
  postgres_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16
