version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: g7kaih-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-g7kaih}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - g7kaih-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: g7kaih-api
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:8080"
    environment:
      # Server
      PORT: 8080
      GIN_MODE: ${GIN_MODE:-release}
      ENVIRONMENT: ${ENVIRONMENT:-production}
      SERVICE_NAME: g7kaih-api
      SERVICE_VERSION: 1.0.0
      BACKEND_URL: http://api:8080

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-g7kaih}
      DB_SSLMODE: disable

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS:-24}

      # CORS
      CORS_MODE: ${CORS_MODE:-production}
      CORS_DEV_FRONTEND_URL: ${CORS_DEV_FRONTEND_URL:-http://localhost:3000}
      CORS_DEV_ADMIN_URL: ${CORS_DEV_ADMIN_URL:-http://localhost:3001}
      CORS_PROD_FRONTEND_URL: ${CORS_PROD_FRONTEND_URL}
      CORS_PROD_ADMIN_URL: ${CORS_PROD_ADMIN_URL}
      CORS_CUSTOM_ORIGINS: ${CORS_CUSTOM_ORIGINS}
      CORS_ALLOW_CREDENTIALS: "true"

      # Cloudinary
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}

      # Microservices
      MICROSERVICES_ENABLED: ${MICROSERVICES_ENABLED:-false}

      # Rate Limiting
      RATE_LIMIT_ENABLED: ${RATE_LIMIT_ENABLED:-true}
      RATE_LIMIT_REQUESTS_PER_MINUTE: ${RATE_LIMIT_REQUESTS_PER_MINUTE:-60}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - g7kaih-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis (optional, untuk caching dan session)
  redis:
    image: redis:7-alpine
    container_name: g7kaih-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - g7kaih-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: g7kaih-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - g7kaih-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  g7kaih-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
